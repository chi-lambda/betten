@{
    ViewData["Title"] = "Home Page";
}

<script type="text/javascript">
function range(size, startAt = 0) {
    return [...Array(size).keys()].map(i => i + startAt);
}
$(document).ready(function(){

    var vue = new Vue({
        el: '#vueapp',
        data: {
            infos: [
                {title: "Einsatz", content: ""},
                {title: "Datum", content: ""},
                {title: "Stationsleitung", content: ""},
                {title: "Medizinischer Leiter/(Not-)Arzt", content: ""},
                {title: "Dokumentations&shy;verantwortliche/r", content: ""},
            ],
            treatmentTypes: [],
            beds: [],
            patients: [],
            helpers: [],
            newPatient: {name: null, firstName: null, gender: null, birth: null, sk: null, discipline: null, bed: null, admission: null, discharge: null, dischargedBy: null, EventId: 1},
            newHelper: {name: null},
            currentTab: 'data',
            patientSortKey: 'id',
            genders: ['m', 'w', 'd', 'unbekannt'],
            disciplines: ['Internistisch', 'Chirurgisch', 'Neuro/Psych', 'Sonstige'],
            editPatient: null,
            isConnecting: true,
        },
        computed: {
            haveBeds: function() {
                return this.beds.length > 0
            },
            sortedPatients: function() {
                if (this.patientSortKey[0] == '-') {
                    return this.patients.concat().sort((x,y) => x[this.patientSortKey.substring(1)] > y[this.patientSortKey.substring(1)]);
                } else {
                    return this.patients.concat().sort((x,y) => x[this.patientSortKey] < y[this.patientSortKey]);
                }
            },
            canAddPatient: function() {
                return this.newPatient.sk != null && this.newPatient.bed != null
            },
        },
        methods: {
            generateBeds: function(){
                ws.send(JSON.stringify({Command: 'CreateBeds', parameters: this.treatmentTypes}));
                //$("#new-patient-birth").datepicker();
            },
            addPatient: function() {
                this.patients.push(
                    {name: this.newPatient.name, firstName: this.newPatient.firstName, gender: this.newPatient.gender, birth: this.newPatient.birth, sk: this.newPatient.sk, discipline: this.newPatient.discipline, bed: this.newPatient.bed, admission: this.newPatient.admission, discharge: this.newPatient.discharge, dischargedBy: this.newPatient.dischargedBy, EventId: 1});
                ws.send(JSON.stringify({Command: 'UpsertPatients', Parameters: [this.newPatient]}));
                this.hideAddPatient();
            },
            savePatient: function() {
                ws.send(JSON.stringify({Command: 'UpsertPatients', Parameters: [this.editPatient]}));
                this.hideEditPatient();
            },
            openTab: function(tabName) {
                this.currentTab = tabName
            },
            colorForPatient: function(patient) {
                if (patient.discharge != null && patient.discharge != '') { return '' }
                if (patient.skId == null || patient.skId == '') { return '' }
                return this.treatmentTypes.find(tt => tt.id == patient.skId).colorClass;
            },
            patientForBed: function(bed) {
                let patients = this.patients.filter(p => p.bed == bed.name && (p.discharge == null || p.discharge == ''));
                if (patients.length > 0) { return patients[0]; }
                return {id: ''};
            },
            sortPatients: function(key) {
                if (this.patientSortKey == key) {
                    this.patientSortKey = '-' + key;
                } else {
                    this.patientSortKey = key;
                }
            },
            addHelper: function() {
                this.helpers.push({name: this.newHelper.name, EventId: 1});
                ws.send(JSON.stringify({Command: 'UpsertHelpers', Parameters: this.helpers}));
                this.newHelper.name = null;
            },
            endEditPatient: function() {
                this.editPatient = null;
            },
            canSavePatient: function(patient) {
                return patient.sk != null && patient.bed != null
            },
            applicableBeds: function(patient) {
                if (patient.skId) {
                    return this.beds.filter(b => b.treatmentType.id == patient.skId && !b.occupied);
                }
            },
            showAddPatient: function() {
                $('#add-patient-modal').show();
            },
            hideAddPatient: function() {
                $('#add-patient-modal').hide();
                this.newPatient.name = null;
                this.newPatient.firstName = null;
                this.newPatient.gender = null;
                this.newPatient.birth = null;
                this.newPatient.skId = null;
                this.newPatient.discipline = null;
                this.newPatient.BedId = null;
                this.newPatient.admission = null;
            },
            showEditPatient: function(patient) {
                this.editPatient = patient;
                $('#edit-patient-modal').show();
            },
            hideEditPatient: function() {
                $('#edit-patient-modal').hide();
                this.editPatient = null;
            },
        },
        watch: {
            patients: {
                deep: true,
                handler: function(val) {
                    for (var i = this.beds.length - 1; i >= 0; i--) {
                        let bed = this.beds[i]
                        this.beds[i].occupied = this.patients.some(p => (p.discharge == null || p.discharge == "") && p.BedId == bed.id)
                        this.beds[i].transportRequested = this.patients.some(p => (p.discharge == null || p.discharge == "") && p.BedId == bed.id && p.transportRequested)
                    }
                }
            }
        }
        });

    window.vue = vue;

    window.addEventListener('beforeunload', function (e) {
        // Cancel the event
        e.preventDefault();
        // Chrome requires returnValue to be set
        e.returnValue = '';
    });

    function wsMessageHandler(event) {
        let json = JSON.parse(event.data);
        console.log(event.data);
        let helpers = json['helpers'];
        if (helpers) {
            vue.helpers = helpers;
        }
        let sks = json['sks'];
        if (sks) {
            vue.treatmentTypes = sks;
        }
        let patients = json['patients'];
        if (patients) {
            for (let patient of patients) {
                patient.bed = vue.beds.find(b => b.id == patient.BedId);
                patient.skId = patient.bed.skId;
            }
            vue.patients = patients;
        }
        let beds = json['beds'];
        if (beds) {
            for (var i = beds.length - 1; i >= 0; i--) {
                let bed = beds[i]
                beds[i].occupied = vue.patients.some(p => (p.discharge == null || p.discharge == "") && p.bed == bed.name)
                beds[i].transportRequested = vue.patients.some(p => (p.discharge == null || p.discharge == "") && p.bed == bed.name && p.transportRequested)
            }
            for (let bed of beds) {
                bed.treatmentType = vue.treatmentTypes.find(tt => tt.id == bed.SKId);
                bed.sk = bed.treatmentType;
            }
            vue.beds = beds;
        }
    }

    let ws;
    function connectWs() {
        ws = new WebSocket("wss://" + location.host + "/ws");
        ws.onopen = function() {
            vue.isConnecting = false;
            ws.send(JSON.stringify({Command: "GetInitialData"}));
        };
        ws.onmessage = wsMessageHandler;
        ws.onclose = function() {
            vue.isConnecting = true;
            window.setTimeout(connectWs, 1000);
        }
        console.log(ws);
    }
    connectWs();

});
//v.patients.some(p => (p.discharge == null || p.discharge == "") && p.bed == t.bedtype + " " + (i + 1))
</script>

<div id="vueapp">

    <div class="w3-panel w3-amber" v-if="isConnecting">
        <h3>Bitte warten …</h3>
        <p>Verbindung mit Server wird hergestellt …</p>
    </div>
    <div class="w3-bar w3-black">
        <button class="w3-bar-item w3-button" v-on:click="openTab('data')">Daten</button>
        <button class="w3-bar-item w3-button" v-on:click="openTab('uhs')" v-if="haveBeds">UHS Belegung</button>
        <button class="w3-bar-item w3-button" v-on:click="openTab('patients')" v-if="haveBeds">Patienten</button>
    </div> 
    <div id="data" v-show="currentTab == 'data'" class="w3-container">
        <div class="w3-half">
            <h1>Einsatzdaten</h1>
            <table class="w3-card-4 w3-table">
                <tr v-for="info in infos">
                    <td v-html="info.title + ':'"></td>
                    <td><input class="w3-input" type="text" v-model="info.content"></td>
                </tr>
            </table>
        </div>
        <div class="w3-container w3-half">
            <h2>Betten</h2>
            <table class="w3-table w3-card-4">
                <tr v-for="m in treatmentTypes" v-bind:class="m.colorClass">
                    <td>{{ m.name }}:</td>
                    <td><input class="w3-input" type="text" v-model="m.count" v-if="!haveBeds">{{ haveBeds ? m.count : '' }}</td>
                </tr>
                <tr>
                    <td>Gesamt</td>
                    <td>{{ treatmentTypes.length > 0 ? treatmentTypes.map(x=>x.count|0).reduce((x,y) => x+y) : 0 }}</td>
                </tr>
            </table>
            <button v-on:click="generateBeds()" class="w3-button w3-gray" v-if="!haveBeds">Betten erstellen</button>
        </div>
        <div class="w3-container w3-half">
            <h2>Helfer</h2>
            <table class="w3-table w3-card-4 w3-striped w3-hover">
                <tr>
                    <td><input type="text" class="w3-input" v-model="newHelper.name" /></td>
                    <td><button class="w3-button w3-green" v-on:click="addHelper()"><i class="fas fa-plus-square"></i></button></td>
                </tr>
                <tr v-for="helper in helpers">
                    <td colspan="2">{{ helper.name }}</td>
                </tr>
            </table>
        </div>
    </div>
    <div id="uhs" v-show="currentTab == 'uhs'">
        <h2>UHS Belegung</h2>
        <table class="w3-table">
            <thead>
                <tr>
                    <th>Platz</th>
                    <th>Status</th>
                    <th>Patientennummer</th>
                    <th>Transport angefordert</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="b in beds">
                    <td v-bind:class="b.treatmentType.colorClass">{{ b.name }}</td>
                    <td v-bind:class="!b.occupied ? b.treatmentType.paleColorClass : b.treatmentType.colorClass">{{ b.occupied ? 'belegt' : 'frei' }}</td>
                    <td v-bind:class="!b.occupied ? b.treatmentType.paleColorClass : b.treatmentType.colorClass">{{ patientForBed(b).id }}</td>
                    <td v-bind:class="!b.occupied ? b.treatmentType.paleColorClass : b.treatmentType.colorClass"><i v-bind:class="{ 'fas': true, 'fa-2x': true, 'fa-check-square': b.transportRequested }" /></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div id="patients" v-show="currentTab == 'patients'">
        <h2>Patientendaten</h2>
        <table class="w3-table w3-striped w3-hover w3-responsive w3-small">
            <thead>
                <tr class="w3-gray">
                    <th v-on:click="sortPatients('id')" >Lfd. Nr.<i class="fas fa-caret-up" v-if="this.patientSortKey == 'id'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-id'"></i></th>
                    <th v-on:click="sortPatients('name')">Name<i class="fas fa-caret-up" v-if="this.patientSortKey == 'name'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-name'"></i></th>
                    <th v-on:click="sortPatients('firstName')">Vorname<i class="fas fa-caret-up" v-if="this.patientSortKey == 'firstName'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-firstName'"></i></th>
                    <th v-on:click="sortPatients('gender')">Geschlecht<i class="fas fa-caret-up" v-if="this.patientSortKey == 'gender'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-gender'"></i></th>
                    <th v-on:click="sortPatients('birth')">Geburtsdatum<i class="fas fa-caret-up" v-if="this.patientSortKey == 'birth'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-birth'"></i></th>
                    <th v-on:click="sortPatients('sk')">SK<i class="fas fa-caret-up" v-if="this.patientSortKey == 'sk'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-sk'"></i></th>
                    <th v-on:click="sortPatients('discipline')">Fachgebiet<i class="fas fa-caret-up" v-if="this.patientSortKey == 'discipline'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-discipline'"></i></th>
                    <th v-on:click="sortPatients('bed')">Platz<i class="fas fa-caret-up" v-if="this.patientSortKey == 'bed'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-bed'"></i></th>
                    <th v-on:click="sortPatients('admission')">Eingang um<i class="fas fa-caret-up" v-if="this.patientSortKey == 'admission'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-admission'"></i></th>
                    <th v-on:click="sortPatients('discharge')">Entlassen um<i class="fas fa-caret-up" v-if="this.patientSortKey == 'discharge'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-discharge'"></i></th>
                    <th>Transport angefordert</th>
                    <th v-on:click="sortPatients('dischargedBy')">Entlassungsart<i class="fas fa-caret-up" v-if="this.patientSortKey == 'dischargedBy'"></i><i class="fas fa-caret-down" v-if="this.patientSortKey == '-dischargedBy'"></i></th>
                    <th>Kommentar</th>
                </tr>
            </thead>
            <tbody>
                <tr class="w3-card-4">
                    <td><button v-on:click="showAddPatient()" class="w3-button w3-green"><i class="fas fa-plus-square"></i></button></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                <tr v-for="patient in sortedPatients">
                    <td><button class="w3-button w3-blue" title="Bearbeiten" v-on:click="showEditPatient(patient)">{{ patient.patientNumber }}</button></td>
                    <td>{{ patient.name }}</td>
                    <td>{{ patient.firstName }}</td>
                    <td>{{ patient.gender }}</td>
                    <td>{{ patient.birth }}</td>
                    <td v-bind:class="patient.bed.sk.colorClass">{{ patient.bed.sk.name }}</td>
                    <td>{{ patient.discipline }}</td>
                    <td v-bind:class="patient.bed.sk.colorClass">{{ patient.bed.name }}</td>
                    <td>{{ patient.admission }}</td>
                    <td>{{ patient.discharge }}</td>
                    <td><input type="checkbox" v-model="patient.transportRequested" class="w3-checkbox w3-large" />
                    <td>{{ patient.dischargedBy }}</td>
                    <td><button disabled="disabled" class="w3-button" v-if="patient.comment">Kommentar</button>
                </tr>
            </tbody>
        </table>
        <div class="w3-modal" id="add-patient-modal">
            <div class="w3-modal-content">
                <header class="w3-container w3-black">
                  <h2>Neuer Patient</h2>
                </header>
                <div class="w3-container">
                    <div class="w3-half w3-container">
                        <label>Vorname:</label>
                        <input class="w3-input" type="text" v-model="newPatient.firstName" />
                    </div>
                    <div class="w3-half w3-container">
                        <label>Name:</label>
                        <input class="w3-input" type="text" v-model="newPatient.name" />
                    </div>
                    <div class="w3-half w3-container">
                        <label>Geschlecht:</label>
                        <select class="w3-select" v-model="newPatient.gender">
                            <option v-for="gender in genders" v-bind:value="gender">{{ gender }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Geburtsdatum:</label>
                        <input class="w3-input" type="text" v-model="newPatient.birth" id="new-patient-birth" />
                    </div>
                    <div style="clear: both;"></div>
                    <div v-bind:class="colorForPatient(newPatient)" class="w3-half w3-container">
                        <label>SK:</label>
                        <select v-model="newPatient.skId" class="w3-select" v-bind:class="colorForPatient(newPatient)">
                            <option v-for="tt in treatmentTypes" v-bind:class="tt.colorClass" v-bind:value="tt.id">{{tt.name}}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Fachgebiet:</label>
                        <select class="w3-select" v-model="newPatient.discipline">
                            <option v-for="discipline in disciplines" v-bind:value="discipline">{{ discipline }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Platz:</label>
                        <select v-model="newPatient.BedId" class="w3-select">
                            <option v-for="b in applicableBeds(newPatient)" v-bind:value="b.id">{{ b.name }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Eingang:</label>
                        <input class="w3-input" type="text" v-model="newPatient.admission" />
                    </div>
                </div>
                <footer class="w3-container w3-padding-16">
                    <button class="w3-button w3-green" v-on:click="addPatient()">Speichern</button>
                    <button class="w3-button w3-gray" v-on:click="hideAddPatient()">Abbrechen</button>
                </footer>
            </div>
        </div>
        <div class="w3-modal" id="edit-patient-modal">
            <div class="w3-modal-content">
                <header class="w3-container w3-black">
                  <h2>Patient bearbeiten</h2>
                </header>
                <div class="w3-container" v-if="editPatient">
                    <div class="w3-half w3-container">
                        <label>Vorname:</label>
                        <input class="w3-input" type="text" v-model="editPatient.firstName" />
                    </div>
                    <div class="w3-half w3-container">
                        <label>Name:</label>
                        <input class="w3-input" type="text" v-model="editPatient.name" />
                    </div>
                    <div class="w3-half w3-container">
                        <label>Geschlecht:</label>
                        <select class="w3-select" v-model="editPatient.gender">
                            <option v-for="gender in genders" v-bind:value="gender">{{ gender }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Geburtsdatum:</label>
                        <input class="w3-input" type="text" v-model="editPatient.birth" id="new-patient-birth" />
                    </div>
                    <div style="clear: both;"></div>
                    <div v-bind:class="colorForPatient(editPatient)" class="w3-half w3-container">
                        <label>SK:</label>
                        <select v-model="editPatient.skId" class="w3-select" v-bind:class="editPatient.bed.sk.colorClass">
                            <option v-for="tt in treatmentTypes" v-bind:class="tt.colorClass" v-bind:value="tt.id">{{tt.name}}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Fachgebiet:</label>
                        <select class="w3-select" v-model="editPatient.discipline">
                            <option v-for="discipline in disciplines" v-bind:value="discipline">{{ discipline }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Platz:</label>
                        <select v-model="editPatient.BedId" class="w3-select">
                            <option v-for="b in applicableBeds(editPatient)" v-bind:value="b.id">{{ b.name }}</option>
                        </select>
                    </div>
                    <div class="w3-half w3-container">
                        <label>Eingang:</label>
                        <input class="w3-input" type="text" v-model="editPatient.admission" />
                    </div>
                </div>
                <footer class="w3-container w3-padding-16">
                    <button class="w3-button w3-green" v-on:click="savePatient()">Speichern</button>
                    <button class="w3-button w3-gray" v-on:click="hideEditPatient()">Abbrechen</button>
                </footer>
            </div>
        </div>
    </div>
</div>